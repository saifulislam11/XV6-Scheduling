diff --git a/Makefile b/Makefile
index 09d790c..d640543 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_second\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,6 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	second.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/proc.c b/proc.c
index 806b1b1..35dd49c 100644
--- a/proc.c
+++ b/proc.c
@@ -7,10 +7,17 @@
 #include "proc.h"
 #include "spinlock.h"
 
-struct {
+#define PHI 0x9e3779b9
+#define STORE_TICKETS_ON_SLEEP
+
+
+struct process_table {
   struct spinlock lock;
   struct proc proc[NPROC];
-} ptable;
+};
+struct process_table ptable;
+
+
 
 static struct proc *initproc;
 
@@ -19,6 +26,69 @@ extern void forkret(void);
 extern void trapret(void);
 
 static void wakeup1(void *chan);
+//-----------------implementation------------------//
+static uint Q[4096], c = 362436;
+
+void srand(uint x)
+{
+  int i;
+
+  Q[0] = x;
+  Q[1] = x + PHI;
+  Q[2] = x + PHI + PHI;
+
+  for (i = 3; i < 4096; i++)
+    Q[i] = Q[i - 3] ^ Q[i - 2] ^ PHI ^ i;
+}
+
+uint rand(void)
+{
+  if(sizeof(unsigned long long) != 8){
+    return 0;
+  }
+  unsigned long long t, a = 18782LL;
+  static uint i = 4095;
+  uint x, r = 0xfffffffe;
+  i = (i + 1) & 4095;
+  t = a * Q[i] + c;
+  c = (t >> 32);
+  x = t + c;
+  if (x < c) {
+    x++;
+    c++;
+  }
+  return (Q[i] = r - x);
+}
+//keep track of the amount of tickets handed out 
+int total_tickets;
+
+// ----------Set process tickets------------// 
+void setproctickets(struct proc* pp, int n)
+{
+  total_tickets -= pp->tickets;
+  pp->tickets = n;
+  total_tickets += pp->tickets;
+}
+//--------------storing tickets----------------//
+void leaveTkts(struct proc* pp)
+{
+  if(pp->state != SLEEPING)
+    panic("Not sleeping!!");
+#ifdef STORE_TICKETS_ON_SLEEP
+  total_tickets -= pp->tickets;
+#endif
+}
+//--------restore just before waking-----------//
+void addTkts(struct proc* pp)
+{
+  if(pp->state != SLEEPING)
+    panic("Not sleeping!!");
+#ifdef STORE_TICKETS_ON_SLEEP
+  total_tickets += pp->tickets;
+#endif
+}
+
+//-----------------end of code --------------------//
 
 void
 pinit(void)
@@ -199,6 +269,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  //added child process gets same tkts
+  setproctickets(np, curproc->tickets);
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -260,6 +332,8 @@ exit(void)
         wakeup1(initproc);
     }
   }
+  //added, set process tkts to ZERO
+  setproctickets(curproc, 0);
 
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
@@ -295,6 +369,10 @@ wait(void)
         p->name[0] = 0;
         p->killed = 0;
         p->state = UNUSED;
+        //added,SET TIME_SLICE=0,TKTS = 0
+        p->ticks = 0;
+        setproctickets(p, 0);
+
         release(&ptable.lock);
         return pid;
       }
@@ -325,17 +403,47 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  //added
+  acquire(&ptable.lock);
+  setproctickets(ptable.proc, 1);
+  release(&ptable.lock);
+  //random number generate
+  static _Bool is_seeded = 0;
+  const int seed = 2215;
+  if(!is_seeded)
+  {
+    srand(seed);
+    is_seeded = 1;
+  }
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
+    //random winning tkts
+    const int set_winning_tkt =	rand()%(total_tickets + 1);
+    int ticket_count = 0;
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
+      {
+	    //ticket counting
+        #ifndef STORE_TICKETS_ON_SLEEP
+	        ticket_count += p->tickets;
+        #endif
+          
+        
+	    continue;
+	  }
+      ticket_count += p->tickets;
+      if(ticket_count < set_winning_tkt)
+      {
         continue;
-
+      }
+      else if(ticket_count> total_tickets)
+      cprintf("Extra: %d | %d | %d\n", ticket_count, total_tickets, set_winning_tkt);
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -343,12 +451,23 @@ scheduler(void)
       switchuvm(p);
       p->state = RUNNING;
 
+      //start time
+      p->inuse = 1;
+      const int tickstart = ticks;
+
       swtch(&(c->scheduler), p->context);
+      //change ticks
+      p->ticks += ticks - tickstart;
       switchkvm();
 
+      
+
+
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      //added,if process gets the winning lottery then break 
+      break;
     }
     release(&ptable.lock);
 
@@ -385,7 +504,14 @@ sched(void)
 void
 yield(void)
 {
+  struct proc *curproc = myproc();
   acquire(&ptable.lock);  //DOC: yieldlock
+
+  //added
+  if(curproc->state == SLEEPING)
+  {
+    panic("Sleep happens here!!");
+  }
   myproc()->state = RUNNABLE;
   sched();
   release(&ptable.lock);
@@ -438,6 +564,8 @@ sleep(void *chan, struct spinlock *lk)
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
+  //store tickets before sleeping.
+  leaveTkts(p);
 
   sched();
 
@@ -460,8 +588,11 @@ wakeup1(void *chan)
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
+      //restore tickets before waking.
+        addTkts(p);
       p->state = RUNNABLE;
+    }
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +617,11 @@ kill(int pid)
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if(p->state == SLEEPING){
+        //restore tickets before waking
+        addTkts(p);
         p->state = RUNNABLE;
+      }
       release(&ptable.lock);
       return 0;
     }
diff --git a/proc.h b/proc.h
index 1647114..17e6dc8 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,8 @@
+#ifndef _PROC_H_
+#define _PROC_H_
+//added
+#include "pstat.h"
+//#include "spinlock.h"
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -13,6 +18,7 @@ struct cpu {
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
+
 //PAGEBREAK: 17
 // Saved registers for kernel context switches.
 // Don't need to save all the segment registers (%cs, etc),
@@ -34,6 +40,7 @@ struct context {
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -49,10 +56,20 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //added
+  int inuse;// if it's using CPU or not
+  int ticks;// number of ticks
+  int tickets;//tickets assigned
 };
 
+
+//declaring here as syproc.c calls it
+void setproctickets(struct proc* pp, int n);
+
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+#endif // _PROC_H_
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..24281f4
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC]; // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC]; // the PID of each process
+  int ticks[NPROC]; // the number of ticks each process has accumulated
+};
+
+#endif // _PSTAT_H_
diff --git a/second.c b/second.c
new file mode 100644
index 0000000..fdd303b
--- /dev/null
+++ b/second.c
@@ -0,0 +1,85 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+#include "fcntl.h"
+
+void for_loop()
+{
+  int i = 0;
+  int j = 0;
+  int k = 0;
+  for(i = 0; i < 50; ++i)
+    {
+      for(j = 0; j < 400000; ++j)
+        {
+	  k = j % 10;
+	  k = k + 1;
+	}
+    }
+}
+
+int
+main(int argc, char *argv[]){
+  int numtickets[]={20,10,30};
+  int pid_chds[3];
+
+  pid_chds[0]=getpid();
+  settickets(numtickets[0]);
+
+  int i;
+  for(i=1;i<3;i++){
+    pid_chds[i]=fork();
+    if(pid_chds[i]==0){
+      for (;;){
+	      for_loop();
+      }
+    }
+    /*else{
+      settickets(numtickets[i]);
+    }*/
+  }
+    
+  struct pstat st;
+  int time=0;
+  int ticks[3]={0,0,0};
+
+  printf(1,"pid:%d, pid:%d, pid:%d\n",pid_chds[0],pid_chds[1],pid_chds[2]);
+  printf(1,"tickets:%d, tickets:%d, tickets:%d\n",30,20,10);
+
+  while(time<50){
+    if(getpinfo(&st)!=0){
+      printf(1,"check failed: getpinfo\n");
+      goto Cleanup;
+    }
+    
+    int j;
+    int pid;
+    for(i=0;i<3;i++){
+      pid=pid_chds[i];
+      for(j=0;j<NPROC;j++){
+	if(st.pid[j]==pid){
+      	  ticks[i]=st.ticks[j];
+	      printf(1,"pid:%d, tickets:%d, ticks:%d\n",pid,st.tickets[j],st.ticks[j]);
+	}
+      }
+    }
+
+   
+   for(i=0;i<3;i++){
+      printf(1,"ticks : %d, ",ticks[i]);
+    }
+    printf(1,"\n");
+    
+    for_loop();
+    time++;
+  }
+    
+ Cleanup:
+  for (i = 0; pid_chds[i] > 0; i++){
+    kill(pid_chds[i]);
+  }
+  while(wait() > -1);
+
+  exit();
+}
diff --git a/syscall.c b/syscall.c
index ee85261..3833787 100644
--- a/syscall.c
+++ b/syscall.c
@@ -90,6 +90,7 @@ extern int sys_exit(void);
 extern int sys_fork(void);
 extern int sys_fstat(void);
 extern int sys_getpid(void);
+extern int sys_getreadcount(void);
 extern int sys_kill(void);
 extern int sys_link(void);
 extern int sys_mkdir(void);
@@ -103,6 +104,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+//adding new sys_call
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +130,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]  sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..0604adf 100644
--- a/syscall.h
+++ b/syscall.h
@@ -1,3 +1,5 @@
+#ifndef _SYSCALL_H_
+#define _SYSCALL_H_
 // System call numbers
 #define SYS_fork    1
 #define SYS_exit    2
@@ -20,3 +22,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+
+#endif // _SYSCALL_H_
+
+
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..472530d 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -16,6 +16,7 @@
 #include "file.h"
 #include "fcntl.h"
 
+
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -90,6 +91,7 @@ sys_write(void)
   return filewrite(f, p, n);
 }
 
+
 int
 sys_close(void)
 {
diff --git a/sysproc.c b/sysproc.c
index 0686d29..88b2159 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,57 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
+#include "spinlock.h"
 
+struct process_table {
+  struct spinlock lock;
+  struct proc proc[NPROC];
+};
+extern struct process_table ptable;
+
+
+
+//------------------implementation part-------------------//
+int sys_settickets(void)
+{
+  int number_of_tickets;
+  // Error
+  argint(0, &number_of_tickets);
+  if(number_of_tickets <= 0)  
+    return -1;
+
+  acquire(&ptable.lock);
+  setproctickets(myproc(), number_of_tickets);
+  release(&ptable.lock);
+
+  return 0;
+}
+
+int sys_getpinfo(void)
+{
+  struct pstat* target;
+  if(argptr(0,(void*)&target,sizeof(*target)) < 0){
+    return -1;
+
+  }
+  acquire(&ptable.lock);
+  struct proc* p;
+  for(p=ptable.proc;p != &(ptable.proc[NPROC]); p++)
+    {
+      const int index = p - ptable.proc;
+      if(p->state != UNUSED)
+        {
+          target->pid[index] = p->pid;
+          target->ticks[index] = p->ticks;
+          target->tickets[index] = p->tickets;
+          target->inuse[index] = p->inuse;
+        }
+    }
+  release(&ptable.lock);
+  return 0;
+}
+//------------------end of implementation-----------------//
 int
 sys_fork(void)
 {
diff --git a/test.patch b/test.patch
new file mode 100644
index 0000000..e69de29
diff --git a/user.h b/user.h
index 4f99c52..17d001f 100644
--- a/user.h
+++ b/user.h
@@ -1,3 +1,4 @@
+#include "pstat.h"
 struct stat;
 struct rtcdate;
 
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//add syscalls
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..bce13c0 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
